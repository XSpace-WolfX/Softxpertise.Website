@page "/contact"

@using Softxpertise.Website.Models
@using Softxpertise.Website.Services

@inject ContactService ContactService
@inject IHttpClientFactory HttpClientFactory

<PageTitle>Contact</PageTitle>

<section class="contact py-5">
    <div class="container mt-5">
        <h2 class="text-center text-uppercase">Contact Us</h2>
        <p class="text-center">
            Have questions or need assistance? Fill out the form below, and we'll get back to you as soon as possible.
        </p>
        <div class="card shadow-sm mt-4">
            <EditForm Model="@formModel" OnValidSubmit="SubmitForm">
                <ValidationSummary />
                <div class="form-group">
                    <label for="userName">Name:</label>
                    <InputText id="userName" @bind-Value="formModel.UserName" class="form-control" />
                </div>
                <div class="form-group mt-3">
                    <label for="userEmail">Email:</label>
                    <InputText id="userEmail" @bind-Value="formModel.UserEmail" class="form-control" />
                </div>
                <div class="form-group mt-3">
                    <label for="userSubject">Subject</label>
                    <InputText id="userSubject" @bind-Value="formModel.UserSubject" class="form-control" />
                </div>
                <div class="form-group mt-3">
                    <label for="userMessage">Message:</label>
                    <InputTextArea id="userMessage" @bind-Value="formModel.UserMessage" class="form-control" />
                </div>
                <button type="submit" class="btn btn-primary mt-4 w-100" disabled="@isSubmitting">
                    @(isSubmitting ? "Sending..." : "Send")
                </button>
            </EditForm>
        </div>
    </div>
</section>

@if (!string.IsNullOrEmpty(responseMessage))
{
    <div class="alert alert-info mt-3">@responseMessage</div>
}

@code {
    private ContactModel formModel = new();
    private string? responseMessage;
    private bool isSubmitting = false;

    private async Task SubmitForm()
    {
        isSubmitting = true;
        responseMessage = null;

        try
        {
            // Créer le HttpClient pour l'API
            var client = HttpClientFactory.CreateClient("ApiClient");

            // Envoyer les données du formulaire à l'API
            var response = await client.PostAsJsonAsync("api/contact/send", formModel);

            if (response.IsSuccessStatusCode)
            {
                responseMessage = "Your message has been sent successfully!";
                formModel = new ContactModel(); // Réinitialise le formulaire
            }
            else
            {
                responseMessage = "Failed to send your message. Please try again.";
            }
        }
        catch (Exception ex)
        {
            responseMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }
}
